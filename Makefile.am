SUBDIRS = . build contrib data doc src examples po tests vapi

ACLOCAL_AMFLAGS = -I build/autotools

EXTRA_DIST = \
	$(noinst_DATA) \
	.version \
	autogen.sh \
	AUTHORS \
	$(NULL)

DISTCHECK_CONFIGURE_FLAGS = \
	--enable-introspection \
	--disable-tracing \
	--disable-maintainer-mode \
	$(NULL)

# Extra clean files so that maintainer-clean removes *everything*
MAINTAINERCLEANFILES = \
	aclocal.m4 \
	compile \
	config.guess \
	config.sub \
	configure \
	depcomp \
	install-sh \
	ltmain.sh \
	Makefile.in \
	missing \
	config.h.in \
	$(NULL)

# see build-aux/git-version-gen for details
BUILT_SOURCES = $(top_srcdir)/.version

$(top_srcdir)/.version:
	echo $(VERSION) > $@-t && mv $@-t $@

GITIGNOREFILES = \
	**/*.swp \
	**/*.lo \
	**/*.stamp \
	*.o \
	aclocal.m4 \
	ChangeLog \
	config \
	config.h.in \
	INSTALL \
	$(NULL)

AUTHORS:
	@if test -d "$(srcdir)/.git"; \
	then \
		echo Creating $@ && \
		( cd "$(top_srcdir)" && \
		  echo '# Generated by Makefile. Do not edit.'; echo; \
		  git log --no-merges --pretty=format:"%an" src \
		  | sort | uniq ) > $@.tmp \
		&& mv -f $@.tmp $@ \
		|| ( rm -f $@.tmp ; \
		     echo Failed to generate $@ >&2 ); \
	fi

dist-hook:
	@if test -d "$(srcdir)/.git"; \
	then \
		echo Creating ChangeLog && \
		( cd "$(top_srcdir)" && \
		  echo '# Generated by Makefile. Do not edit.'; echo; \
		  $(top_srcdir)/build/missing --run git log --stat ) > ChangeLog.tmp \
		&& mv -f ChangeLog.tmp $(top_distdir)/ChangeLog \
		|| ( rm -f ChangeLog.tmp ; \
		     echo Failed to generate ChangeLog >&2 ); \
	else \
		echo A git clone is required to generate a ChangeLog >&2; \
	fi

.PHONY: AUTHORS

RUNTIME_TYPELIB_PATH = \
	src/libdcs-core:src/libdcs-control:src/libdcs-daq:src/libdcs-log:src/libdcs-net:src/libdcs-ui:$(GI_TYPELIB_PATH)

run:
	PEAS_DEBUG=1 \
	GI_TYPELIB_PATH="$(RUNTIME_TYPELIB_PATH)" \
	GOBJECT_DEBUG=instance-count \
	PATH=$(top_builddir)/src/dcsg:$(PATH) \
	$(LIBTOOL) --mode=execute gdb -ex run --args src/dcsg/dcsg -vvv -f tests/config/blank.xml

strace:
	PEAS_DEBUG=1 \
	GI_TYPELIB_PATH="$(RUNTIME_TYPELIB_PATH)" \
	GOBJECT_DEBUG=instance-count \
	PATH=$(top_builddir)/src/dcsg:$(PATH) \
	$(LIBTOOL) --mode=execute strace -T src/dcsg/dcsg -vvv -f tests/config/blank.xml

debug:
	G_SLICE=always-malloc \
	PEAS_DEBUG=1 \
	GI_TYPELIB_PATH="$(RUNTIME_TYPELIB_PATH)" \
	G_DEBUG=fatal-criticals \
	GOBJECT_DEBUG=instance-count \
	PATH=$(top_builddir)/src/dcsg:$(PATH) \
	$(LIBTOOL) --mode=execute gdb -ex run --args src/dcsg/dcsg -vvv -f tests/config/blank.xml

valgrind:
	PEAS_DEBUG=1 \
	GI_TYPELIB_PATH="$(RUNTIME_TYPELIB_PATH)" \
	G_DEBUG=fatal-criticals \
	G_SLICE=always-malloc \
	PATH=$(top_builddir)/src/dcsg:$(PATH) \
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck --leak-check=full --leak-resolution=high \
		--num-callers=20 --log-file=vgdump src/dcsg/dcsg -vvv -f tests/config/blank.xml

test:
	$(MAKE) -C tests test

if ENABLE_COVERAGE
coverage:
	$(MAKE) -C tests coverage-reset
	$(MAKE) check
	$(MAKE) -C tests coverage-report

GITIGNOREFILES += \
	lcov.info \
	gmon.out \
	$(NULL)
else
coverage:
	@echo "The project has not been configured for coverage, check that you have gcov, lcov."
	@echo "Of course, do not use --disable-coverage"
	@exit 1
endif

.PHONY: coverage

vala-clean:
	rm -f `find . -name "*.stamp"`

-include $(top_srcdir)/git.mk
